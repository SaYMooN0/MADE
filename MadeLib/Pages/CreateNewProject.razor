@page "/createNewProject"
@inject MadeLib.Src.ProjectManager projectManager
@inject IJSRuntime JSRuntime;

<link href="_content/MadeLib/css/pages/createNewProject.css" rel="stylesheet" />
<form class="input-container" id="newProjectForm">
    <header class="new-project-header">Set up new project</header>
    <p class="new-line"><label class="new-project-label">Project path: </label></p>
    <p class="new-line">
        <input class="new-project-input" type="text" id="path-input" name="path" required autocomplete="off" @bind="FolderPath">
        <button id="openFileExplorerBtn" class="open-file-explorer-btn" type="button" @onclick="FillForm">...</button>
    </p>
    <p id="warning" class="warning"></p>
    <p class="new-line"> <label class="new-project-label">Name: </label> </p>
    <p class="new-line">
        <input class="new-project-input" type="text" id="name-input" name="name" required autocomplete="off" @bind="Name">
    </p>
    <p class="new-line"> <label class="new-project-label">Version: </label> </p>
    <p class="new-line">
        <input class="new-project-input" type="text" id="version-input" name="version" required autocomplete="off" @bind="Version" />
    </p>
    <p class="new-line"> <label class="new-project-label">Mod loader: </label> </p>
    <p class="new-line">
        <select @bind="ModLoader" class="loader-select" name="loader" required id="loader-input">
            @foreach (var loader in Loaders)
            {
                <option value="@loader">@loader</option>
            }
        </select>
    </p>
    <button class="create-btn" type="submit">Create</button>
</form>
<a class="cancel-btn no-underline" href="/startingActions">Cancel</a>
<dialog id="warningDialog" class="warning-dialog">
    <p class="warning-dialog-p" id="warningDialogString"></p>
    <div class="warning-dialog-btns-container">
        <p></p>
        <button id="openGithubBtn" class="warning-dialog-btn-open">Open issues page</button>
        <button id="closeWarningDialog" class="warning-dialog-btn-ok">Ok</button>
    </div>
</dialog>
@code {
    private string FolderPath { get; set; }
    private string Name { get; set; }
    private string Version { get; set; }
    private Loader ModLoader { get; set; } = Loader.Forge;
    private IEnumerable<string> Loaders => Enum.GetNames(typeof(Loader));
    private ElementReference WarningDialog;

    private void FillForm()
    {
        string path = projectManager.ChooseFolder();

        if (!string.IsNullOrEmpty(path))
        {
            FolderPath = path;
            ProjectCreationInformation creationInformation = projectManager.GetInformationToFillCreationForm(path);
            if (!string.IsNullOrEmpty(creationInformation.ModLoader.ToString()))
            {
                Name = creationInformation.Name;
                Version = creationInformation.Version;
                ModLoader = (Loader)creationInformation.ModLoader;
                CloseWarning();
            }
            else
            {
                ShowWarning();
                Name = "";
                Version = "";
                ModLoader = Loader.Forge;
            }
        }
    }
    private async void ShowWarningDialog() { await JSRuntime.InvokeVoidAsync("showModal", "warningDialog"); }
    private async void CloseWarningDialog() { await JSRuntime.InvokeVoidAsync("closeModal", "warningDialog"); }
    private async void ShowWarning() { await JSRuntime.InvokeVoidAsync("showWarning"); }
    private async void CloseWarning() { await JSRuntime.InvokeVoidAsync("closeWarning"); }
}